---

AWSTemplateFormatVersion: "2010-09-09"
Description: AWS Foundation Template


Parameters:
  Environment:
    Description: Stack environment
    Type: String
    AllowedValues:
      - integration
      - staging
      - production

  FoundationBucket:
    Default: rig.awsrig.dmacedo.foundation
    Description: Foundation S3 Bucket
    Type: String

  ProjectName:
    Default: awsrig
    Description: Project name
    Type: String

  PublicDomainName:
    Description: Public Domain Name for sites and services created by this stack.
    Type: String

  Region:
    Default: us-east-1
    Description: Region
    Type: String

  CreateHostedZone:
    Default: no
    Description: Whether a new Route 53 hosted zone should be created for this stack.
    Type: String
    AllowedValues:
      - no
      - yes


Conditions:
  ShouldCreateHostedZone: !Equals [ !Ref CreateHostedZone, yes ]

Mappings:
  EnvironmentToCidr:
    integration:
      CidrBlock: "10.1.0.0/16"
      SubnetPublicCidrBlocks: "10.1.1.0/24,10.1.2.0/24"
      SubnetPrivateCidrBlocks: "10.1.11.0/24,10.1.12.0/24"
    staging:
      CidrBlock: "10.2.0.0/16"
      SubnetPublicCidrBlocks: "10.2.1.0/24,10.2.2.0/24"
      SubnetPrivateCidrBlocks: "10.2.11.0/24,10.2.12.0/24"
    production:
      CidrBlock: "10.3.0.0/16"
      SubnetPublicCidrBlocks: "10.3.1.0/24,10.3.2.0/24"
      SubnetPrivateCidrBlocks: "10.3.11.0/24,10.3.12.0/24"

Resources:
  Vpc:
    Type: AWS::CloudFormation::Stack
    Properties:
      Parameters:
        CidrBlock: !FindInMap [ EnvironmentToCidr, !Ref Environment, CidrBlock ]
        Environment: !Ref Environment
        FoundationStackName: !Sub ${AWS::StackName}
        Region: !Ref Region
        SubnetPrivateCidrBlocks: !FindInMap [ EnvironmentToCidr, !Ref Environment, SubnetPrivateCidrBlocks ]
        SubnetPublicCidrBlocks: !FindInMap [ EnvironmentToCidr, !Ref Environment, SubnetPublicCidrBlocks ]
        InternalHostedZoneName: !Sub "${ProjectName}.internal"
      TemplateURL: !Sub https://s3.amazonaws.com/${FoundationBucket}/templates/vpc.yaml
      TimeoutInMinutes: 60

  Dns:
    Condition: ShouldCreateHostedZone
    Type: AWS::CloudFormation::Stack
    Properties:
      Parameters:
        Environment: !Ref Environment
        FoundationStackName: !Sub ${AWS::StackName}
        PublicDomainName: !Ref PublicDomainName
      TemplateURL: !Sub https://s3.amazonaws.com/${FoundationBucket}/templates/dns.yaml
      TimeoutInMinutes: 60

  Nat:
    DependsOn:
      - Vpc
    Type: AWS::CloudFormation::Stack
    Properties:
      Parameters:
        FoundationStackName: !Sub ${AWS::StackName}
      TemplateURL: !Sub https://s3.amazonaws.com/${FoundationBucket}/templates/nat.yaml
      TimeoutInMinutes: 60

  LoadBalancer:
    DependsOn:
      - Vpc
    Type: AWS::CloudFormation::Stack
    Properties:
      TemplateURL: !Sub https://s3.amazonaws.com/${FoundationBucket}/templates/load-balancer.yaml
      Parameters:
        FoundationStackName: !Sub ${AWS::StackName}

Outputs:
  FoundationVpcId:
    Description: VPC Id
    Value: !GetAtt Vpc.Outputs.VpcId

  PublicLoadBalancerSecurityGroup:
    Description: Security group of public load balancer
    Value: !GetAtt LoadBalancer.Outputs.SecurityGroup
    Export:
      Name: !Sub "${AWS::StackName}--ALB--SG"

