---

Description: Deployment Pipeline
AWSTemplateFormatVersion: 2010-09-09

Parameters:
  AppStackName:
    Type: String

  PublicDomainName:
    Type: String

  InfraDevBucketBase:
    Type: String

  BuildArtifactsBucket:
    Type: String

  GitHubRepo:
    Type: String

  GitHubBranch:
    Type: String

  GitHubToken:
    Type: String

  GitHubOwner:
    Type: String
    Default: buildit

  ApplicationName:
    Type: String

  Prefix:
    Type: String

  ContainerPort:
    Type: Number

  ListenerRulePriority:
    Description: The unique priority across applications sharing the ALB
    Type: Number

  SlackChannel:
    Description: Slack channel (no \#) to post to
    Type: String
    Default: ""

# Conditions:
#   ShouldCreateSns: !Not [ Equals [ !Ref SlackChannel, "" ] ]

Resources:
  Repository:
    Type: AWS::ECR::Repository
    Properties:
      RepositoryName: !Join [ '-', [ !Ref AppStackName, !Ref GitHubRepo, !Ref GitHubBranch, 'ecr', 'repo' ] ]

#  CodePipelineSNSTopic:
#     Condition: ShouldCreateSns
#     Type: AWS::SNS::Topic
#     Properties:
#       Subscription:
#         - Endpoint: "https://hooks.slack.com/services/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"
#           Protocol: https

  CloudFormationExecutionRole:
    Type: AWS::IAM::Role
    Properties:
      Path: /
      AssumeRolePolicyDocument: |
        {
            "Statement": [{
                "Effect": "Allow",
                "Principal": { "Service": [ "cloudformation.amazonaws.com" ]},
                "Action": [ "sts:AssumeRole" ]
            }]
        }
      Policies:
        - PolicyName: root
          PolicyDocument:
            Version: 2012-10-17
            Statement:
              - Resource: "*"
                Effect: Allow
                Action:
                  - ecs:*
                  - ecr:*
                  - iam:*
                  - route53:*
                  - elasticloadbalancing:*

  CodeBuildServiceRole:
    DependsOn: CloudFormationExecutionRole
    Type: AWS::IAM::Role
    Properties:
      Path: /
      AssumeRolePolicyDocument: |
        {
            "Statement": [{
                "Effect": "Allow",
                "Principal": { "Service": [ "codebuild.amazonaws.com" ]},
                "Action": [ "sts:AssumeRole" ]
            }]
        }
      Policies:
        - PolicyName: root
          PolicyDocument:
            Version: 2012-10-17
            Statement:
              - Resource: "*"
                Effect: Allow
                Action:
                  - logs:CreateLogGroup
                  - logs:CreateLogStream
                  - logs:PutLogEvents
                  - ecr:GetAuthorizationToken
              - Resource: !Sub arn:aws:s3:::${BuildArtifactsBucket}/*
                Effect: Allow
                Action:
                  - s3:GetObject
                  - s3:PutObject
                  - s3:GetObjectVersion
              - Resource: !Sub "arn:aws:ecr:${AWS::Region}:${AWS::AccountId}:repository/${Repository}"
                Effect: Allow
                Action:
                  - ecr:GetDownloadUrlForLayer
                  - ecr:BatchGetImage
                  - ecr:BatchCheckLayerAvailability
                  - ecr:PutImage
                  - ecr:InitiateLayerUpload
                  - ecr:UploadLayerPart
                  - ecr:CompleteLayerUpload

  CodePipelineServiceRole:
    Type: AWS::IAM::Role
    Properties:
      Path: /
      AssumeRolePolicyDocument: |
        {
            "Statement": [{
                "Effect": "Allow",
                "Principal": { "Service": [ "codepipeline.amazonaws.com" ]},
                "Action": [ "sts:AssumeRole" ]
            }]
        }
      Policies:
        - PolicyName: root
          PolicyDocument:
            Version: 2012-10-17
            Statement:
              - Resource:
                  - !Sub arn:aws:s3:::${BuildArtifactsBucket}
                  - !Sub arn:aws:s3:::${BuildArtifactsBucket}/*
                  - !Sub arn:aws:s3:::${InfraDevBucketBase}.integration
                  - !Sub arn:aws:s3:::${InfraDevBucketBase}.integration/*
                  - !Sub arn:aws:s3:::${InfraDevBucketBase}.staging
                  - !Sub arn:aws:s3:::${InfraDevBucketBase}.staging/*
                  - !Sub arn:aws:s3:::${InfraDevBucketBase}.production
                  - !Sub arn:aws:s3:::${InfraDevBucketBase}.production/*
                Effect: Allow
                Action:
                  - s3:PutObject
                  - s3:GetObject
                  - s3:GetObjectVersion
                  - s3:GetBucketVersioning
              - Resource:
                  - !Sub arn:aws:ssm:${AWS::Region}:${AWS::AccountId}:parameter/${AppStackName}-*
                Effect: Allow
                Action:
                  - ssm:GetParameters
              - Resource: "*"
                Effect: Allow
                Action:
                  - codebuild:StartBuild
                  - codebuild:BatchGetBuilds
                  - cloudformation:*
                  - iam:PassRole
                  - sns:Publish

  CodeBuildProject:
    Type: AWS::CodeBuild::Project
    Properties:
      Artifacts:
        Type: "CODEPIPELINE"
      Source:
        Type: "CODEPIPELINE"
      Environment:
        ComputeType: "BUILD_GENERAL1_SMALL"
        Image: "aws/codebuild/docker:1.12.1"
        # Image: "aws/codebuild/java:openjdk-8"
        # Image: "aws/codebuild/eb-java-8-amazonlinux-64:2.4.3"
        # PrivilegedMode: true
        Type: "LINUX_CONTAINER"
        EnvironmentVariables:
        #   - Name: AWS_REGION
        #     Value: !Ref AWS::Region
          - Name: REPOSITORY_URI
            Value: !Sub "${AWS::AccountId}.dkr.ecr.${AWS::Region}.amazonaws.com/${Repository}"
          - Name: BRANCH
            Value: !Ref GitHubBranch
      Name: !Join [ '-', [ !Ref AppStackName, !Ref GitHubRepo, !Ref GitHubBranch, 'build' ] ]
      ServiceRole: !Ref CodeBuildServiceRole

  Pipeline:
    Type: AWS::CodePipeline::Pipeline
    Properties:
      RoleArn: !GetAtt CodePipelineServiceRole.Arn
      ArtifactStore:
        Type: S3
        Location: !Ref BuildArtifactsBucket
      Stages:
        - Name: Source
          Actions:
            - Name: App
              ActionTypeId:
                Category: Source
                Owner: ThirdParty
                Version: 1
                Provider: GitHub
              Configuration:
                Owner: !Ref GitHubOwner
                Repo: !Ref GitHubRepo
                Branch: !Ref GitHubBranch
                OAuthToken: !Ref GitHubToken
              OutputArtifacts:
                - Name: App
              RunOrder: 1
            - Name: AppIntegrationTemplate
              ActionTypeId:
                Category: Source
                Owner: AWS
                Version: 1
                Provider: S3
              OutputArtifacts:
                - Name: IntegrationTemplate
              RunOrder: 1
              Configuration:
                S3Bucket: !Sub "${InfraDevBucketBase}.integration"
                S3ObjectKey: "templates/templates.zip"
              RunOrder: 1
            - Name: AppStagingTemplate
              ActionTypeId:
                Category: Source
                Owner: AWS
                Version: 1
                Provider: S3
              OutputArtifacts:
                - Name: StagingTemplate
              RunOrder: 1
              Configuration:
                S3Bucket: !Sub "${InfraDevBucketBase}.staging"
                S3ObjectKey: "templates/templates.zip"
              RunOrder: 1
            - Name: AppProductionTemplate
              ActionTypeId:
                Category: Source
                Owner: AWS
                Version: 1
                Provider: S3
              OutputArtifacts:
                - Name: ProductionTemplate
              RunOrder: 1
              Configuration:
                S3Bucket: !Sub "${InfraDevBucketBase}.production"
                S3ObjectKey: "templates/templates.zip"
              RunOrder: 1
        - Name: Build
          Actions:
            - Name: Build
              ActionTypeId:
                Category: Build
                Owner: AWS
                Version: 1
                Provider: CodeBuild
              Configuration:
                ProjectName: !Ref CodeBuildProject
              InputArtifacts:
                - Name: App
              OutputArtifacts:
                - Name: BuildOutput
              RunOrder: 1
        - Name: Integration
          Actions:
            - Name: Deploy-to-Integration
              ActionTypeId:
                Category: Deploy
                Owner: AWS
                Version: 1
                Provider: CloudFormation
              Configuration:
                ActionMode: CREATE_UPDATE
                StackName: !Sub "${AppStackName}-integration-app-${GitHubRepo}-${GitHubBranch}"
                Capabilities: CAPABILITY_NAMED_IAM
                OutputFileName: CloudFormationOutput.json
                TemplatePath: IntegrationTemplate::app.yaml
                RoleArn: !GetAtt CloudFormationExecutionRole.Arn
                ParameterOverrides: !Sub |
                  {
                    "Environment": "integration",
                    "FoundationStackName": "${AppStackName}-integration-foundation",
                    "ComputeStackName": "${AppStackName}-integration-compute-ecs",
                    "InfraDevBucket": "${InfraDevBucketBase}.integration",
                    "PublicDomainName": "${PublicDomainName}",
                    "Repository": "${Repository}",
                    "ApplicationName": "${ApplicationName}",
                    "Prefix": "${Prefix}",
                    "ContainerPort": "${ContainerPort}",
                    "TaskDesiredCount":"1",
                    "ListenerRulePriority": "${ListenerRulePriority}",
                    "Tag": { "Fn::GetParam" : [ "BuildOutput", "build.json", "tag" ] }
                  }
              InputArtifacts:
                - Name: IntegrationTemplate
                - Name: BuildOutput
              OutputArtifacts:
                - Name: IntegrationEnvironment
              RunOrder: 1
        - Name: Staging
          Actions:
            - Name: Deploy-to-Staging
              ActionTypeId:
                Category: Deploy
                Owner: AWS
                Version: 1
                Provider: CloudFormation
              Configuration:
                ActionMode: CREATE_UPDATE
                StackName: !Sub "${AppStackName}-staging-app-${GitHubRepo}-${GitHubBranch}"
                Capabilities: CAPABILITY_NAMED_IAM
                OutputFileName: CloudFormationOutput.json
                TemplatePath: StagingTemplate::app.yaml
                RoleArn: !GetAtt CloudFormationExecutionRole.Arn
                ParameterOverrides: !Sub |
                  {
                    "Environment": "staging",
                    "FoundationStackName": "${AppStackName}-staging-foundation",
                    "ComputeStackName": "${AppStackName}-staging-compute-ecs",
                    "InfraDevBucket": "${InfraDevBucketBase}.staging",
                    "PublicDomainName": "${PublicDomainName}",
                    "Repository": "${Repository}",
                    "ApplicationName": "${ApplicationName}",
                    "Prefix": "${Prefix}",
                    "ContainerPort": "${ContainerPort}",
                    "TaskDesiredCount":"1",
                    "ListenerRulePriority": "${ListenerRulePriority}",
                    "Tag": { "Fn::GetParam" : [ "BuildOutput", "build.json", "tag" ] }
                  }
              InputArtifacts:
                - Name: StagingTemplate
                - Name: BuildOutput
              OutputArtifacts:
                - Name: StagingEnvironment
              RunOrder: 1
        - Name: Production
          Actions:
            - Name: CreateChangeSet
              ActionTypeId:
                Category: Deploy
                Owner: AWS
                Provider: CloudFormation
                Version: '1'
              InputArtifacts:
                - Name: ProductionTemplate
                - Name: BuildOutput
              Configuration:
                ActionMode: CHANGE_SET_REPLACE
                RoleArn: !GetAtt CloudFormationExecutionRole.Arn
                StackName: !Sub "${AppStackName}-production-app-${GitHubRepo}-${GitHubBranch}"
                Capabilities: CAPABILITY_NAMED_IAM
                ChangeSetName: !Sub "${AppStackName}-production-app-${GitHubRepo}-${GitHubBranch}"
                TemplatePath: ProductionTemplate::app.yaml
                ParameterOverrides: !Sub |
                  {
                    "Environment": "production",
                    "FoundationStackName": "${AppStackName}-production-foundation",
                    "ComputeStackName": "${AppStackName}-production-compute-ecs",
                    "InfraDevBucket": "${InfraDevBucketBase}.production",
                    "PublicDomainName": "${PublicDomainName}",
                    "Repository": "${Repository}",
                    "ApplicationName": "${ApplicationName}",
                    "Prefix": "${Prefix}",
                    "ContainerPort": "${ContainerPort}",
                    "TaskDesiredCount":"1",
                    "ListenerRulePriority": "${ListenerRulePriority}",
                    "Tag": { "Fn::GetParam" : [ "BuildOutput", "build.json", "tag" ] }
                  }
              RunOrder: 1
            - Name: ApproveChangeSet
              ActionTypeId:
                Category: Approval
                Owner: AWS
                Provider: Manual
                Version: '1'
        #       Configuration:
        #         NotificationArn: !Ref CodePipelineSNSTopic
        #         CustomData: !Sub |
        #           {
        #             "icon_emjoi": ":tada:",
        #             "username": "AWS CodePipeline Overlord",
        #             "channel": "${SlackChannel}",
        #             "fallback": "",
        #             "color":
        # "Build Failed - Staging - Branch: ${env.BRANCH_NAME}",
        # "(<${env.BUILD_URL}|Failed Job>) Commit '<${gitUrl}/commits/${shortCommitHash}|${shortCommitHash}>' failed.\n\n${commitMessage}",
        # "danger",
        #             ""'A new change set was created for the ${AppStackName}-production-app-${GitHubRepo}-${GitHubBranch} stack. Do you want to implement the changes?'
        #           }
              RunOrder: 2
            - Name: ExecuteChangeSet
              ActionTypeId:
                Category: Deploy
                Owner: AWS
                Provider: CloudFormation
                Version: '1'
              Configuration:
                ActionMode: CHANGE_SET_EXECUTE
                ChangeSetName: !Sub "${AppStackName}-production-app-${GitHubRepo}-${GitHubBranch}"
                RoleArn: !GetAtt CloudFormationExecutionRole.Arn
                StackName: !Sub "${AppStackName}-production-app-${GitHubRepo}-${GitHubBranch}"
                Capabilities: CAPABILITY_NAMED_IAM
                OutputFileName: CloudFormationOutput.json
              OutputArtifacts:
                - Name: ProductionEnvironment
              RunOrder: 3

Outputs:
  PipelineUrl:
    Description: Pipeline Url
    Value: !Join
      - ''
      - - 'https://console.aws.amazon.com/codepipeline/home?region='
        - !Ref 'AWS::Region'
        - '#/view/'
        - !Ref Pipeline
